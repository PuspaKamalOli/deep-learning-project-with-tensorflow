# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IZdlY1Fs5mIQec81HcNOyPM6rZxON3v2
"""

import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.model_selection import train_test_split

#making dataset
N=1000
x=np.random.random((N,2))*6-3#uniformly distributed between -3 and +3
y=np.cos(2*x[:,0])+np.cos(3*x[:,1])# this implement the function:cos(2x1)+cos(3x2)

#plot it
fig=plt.figure()
ax=fig.add_subplot(111,projection='3d')
ax.scatter(x[:,0],x[:,1],y)

#build the model
model=tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(2,)),
    tf.keras.layers.Dense(128,activation='relu'),
    tf.keras.layers.Dense(1)
])

#compile the model
model.compile( optimizer=tf.keras.optimizers.SGD(0.001,0.9), loss='mse')

r=model.fit(x,y,epochs=100)

plt.plot(r.history['loss'],label='loss')
plt.xlabel("epochs")
plt.ylabel("loss")

#plot the prediction surface

fig=plt.figure()
ax=fig.add_subplot(111,projection='3d')
ax.scatter(x[:,0],x[:,1],y)
#surface plot
line=np.linspace(-3,3,50)
xx,yy=np.meshgrid(line,line)
xgrid=np.vstack((xx.flatten(),yy.flatten())).T
yhat=model.predict(xgrid).flatten()
ax.plot_trisurf(xgrid[:,0],xgrid[:,1],yhat,linewidth=0.2,antialiased=True)
plt.show()

#can it extrapolate?
#plot the prediction surface
fig=plt.figure()
ax=fig.add_subplot(111,projection='3d')
ax.scatter(x[:,0],x[:,1],y)
#surface plot
line=np.linspace(-5,5,50)

